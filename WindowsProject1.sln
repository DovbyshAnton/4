#include <Windows.h>
#include <iostream>
#include <string>

// Function to determine the quadrant based on the given coordinates
int determineQuadrant(int x, int y) {
    if (x > 0 && y > 0) {
        return 1;
    }
    else if (x < 0 && y > 0) {
        return 2;
    }
    else if (x < 0 && y < 0) {
        return 3;
    }
    else if (x > 0 && y < 0) {
        return 4;
    }
    else {
        return 0;
    }
}

// Function to handle the button click event
void onButtonClick(HWND hwnd, int x, int y) {
    // Determine the quadrant based on the given coordinates
    int quadrant = determineQuadrant(x, y);

    // Display the quadrant on the graphical representation
    HDC hdc = GetDC(hwnd);
    HBRUSH brush;

    switch (quadrant) {
    case 1:
        brush = CreateSolidBrush(RGB(255, 0, 0)); // Red color for quadrant 1
        break;
    case 2:
        brush = CreateSolidBrush(RGB(0, 255, 0)); // Green color for quadrant 2
        break;
    case 3:
        brush = CreateSolidBrush(RGB(0, 0, 255)); // Blue color for quadrant 3
        break;
    case 4:
        brush = CreateSolidBrush(RGB(255, 255, 0)); // Yellow color for quadrant 4
        break;
    default:
        brush = CreateSolidBrush(RGB(255, 255, 255)); // White color for invalid quadrant
        break;
    }

    RECT rect;
    rect.left = 100;
    rect.top = 100;
    rect.right = 200;
    rect.bottom = 200;

    FillRect(hdc, &rect, brush);
    ReleaseDC(hwnd, hdc);
}

// Window procedure for handling messages
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_CLOSE:
        DestroyWindow(hwnd);
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    case WM_COMMAND:
        if (HIWORD(wParam) == BN_CLICKED) {
            // Get the coordinates from the input fields
            HWND xInput = GetDlgItem(hwnd, 1001);
            HWND yInput = GetDlgItem(hwnd, 1002);

            int x = GetDlgItemInt(hwnd, 1001, NULL, FALSE);
            int y = GetDlgItemInt(hwnd, 1002, NULL, FALSE);

            // Handle the button click event
            onButtonClick(hwnd, x, y);
        }
        break;
    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

// Entry point of the program
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    // Register the window class
    const wchar_t CLASS_NAME[] = L"Sample Window Class";

    WNDCLASS wc = {};

    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    // Create the window
    HWND hwnd = CreateWindowEx(
        0,                              // Optional window styles
        CLASS_NAME,                     // Window class
        L"Sample Window",               // Window text
        WS_OVERLAPPEDWINDOW,            // Window style

        // Size and position
        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,

        NULL,       // Parent window    
        NULL,       // Menu
        hInstance,  // Instance handle
        NULL        // Additional application data
    );

    if (hwnd == NULL) {
        return 0;
    }

    // Create the input fields
    CreateWindow(L"STATIC", L"X:", WS_VISIBLE | WS_CHILD, 10, 10, 20, 20, hwnd, NULL, hInstance, NULL);
    CreateWindow(L"EDIT", L"", WS_VISIBLE | WS_CHILD | WS_BORDER, 40, 10, 50, 20, hwnd, (HMENU)1001, hInstance, NULL);

    CreateWindow(L"STATIC", L"Y:", WS_VISIBLE | WS_CHILD, 10, 40, 20, 20, hwnd, NULL, hInstance, NULL);
    CreateWindow(L"EDIT", L"", WS_VISIBLE | WS_CHILD | WS_BORDER, 40, 40, 50, 20, hwnd, (HMENU)1002, hInstance, NULL);

    // Create the button
    CreateWindow(L"BUTTON", L"Calculate", WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, 10, 70, 80, 25, hwnd, NULL, hInstance, NULL);

    // Show the window
    ShowWindow(hwnd, nCmdShow);

    // Run the message loop
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
